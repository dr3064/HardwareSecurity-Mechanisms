1. Position-Independent Executable (PIE, -fPIE -pie):
   - Purpose: Enables ASLR for Node.js binary.
   - Justification: Reduces predictability of code locations.
   - Expected Impact: Negligible (<5%).

2. Strong Stack-Protector (-fstack-protect-strong):
   - Purpose: Prevents stack buffer overflows in V8â€™s C++ code.
   - Justification: Protects against stack-smashing in JavaScript engine.
   - Expected Impact: Slight overhead (<5%).

3. Control-Flow Integrity (CFI, -fsanitize=cfi):
   - Purpose: Enforces valid control flow in V8.
   - Justification: Mitigates control-flow hijacking in complex codebase.
   - Expected Impact: 10-20% performance hit.

4. System Call Filtering (Seccomp-BPF, --enable-seccomp):
   - Purpose: Restricts syscalls to reduce attack surface.
   - Justification: Limits kernel interactions by untrusted code.
   - Expected Impact: Minimal (<5%).

5. Heap Hardening (--enable-heap-protection):
   - Purpose: Adds guard pages to V8 heap to detect overflows.
   - Justification: Protects against heap-based exploits.
   - Expected Impact: 10-20% memory usage increase.

6. SafeStack (-fsanitize=safe-stack):
   - Purpose: Separates stack for sensitive data to prevent corruption.
   - Justification: Alternative to ARM PAC for x86, enhances stack safety.
   - Expected Impact: 5-10% overhead.
